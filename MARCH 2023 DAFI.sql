-- MYSQL DAFI MARCH 2023
-- FACILITATED BY ABDULLAH BANKOLE, MCDAA 
-- FOR QUANTUM ANALYTICS NG 


-- SELECT STATEMENT 
-- USED TO FETCH COLUMNS FROM A TABLE 

-- FETCH ALL THE COLUMNS
-- USE * AFTER THE SELECT STATEMENT 
SELECT * FROM EMPLOYEES;

SELECT * FROM PAYMENTS;
 
-- FETCH SPECIFIC COLUMNS
-- PUT THE NAMES OF THE DESIRED COLUMNS AFTER THE SELECT STATEMENT 
SELECT CUSTOMERNUMBER, AMOUNT FROM PAYMENTS;

SELECT LASTNAME, FIRSTNAME FROM EMPLOYEES;

-- SORTING RECORDS 
-- THIS IS THE ARRANGMENT OF RECORDS IN A UNIFORM MANNER 
-- ORDER BY ==> USED TO SORT RECORDS
-- ASCENDING, ASC ==> SMALLEST TO THE BIGGEST, A-Z, 0-9
-- DESCENDING, DESC ==> BIGGEST TO THE SMALLEST, Z-A, 9-0

SELECT LASTNAME, FIRSTNAME FROM EMPLOYEES
ORDER BY LASTNAME ASC;

SELECT * FROM PAYMENTS
ORDER BY AMOUNT DESC;

-- LIMITING RECORDS 
-- LIMIT N ==> USED TO REDUCE THE AMOUNT OF RESULTS SHOWN
SELECT * FROM PAYMENTS
ORDER BY AMOUNT DESC
LIMIT 10;

 -- FILTERING RECORDS 
 -- WHERE ==> KEYWORD USED TO FILTER RECORDS 
 -- OPERATORS
	-- MATHEMATICAL: >,<,=,>=,<=,<>,!=
    -- LOGICAL: AND, OR 
 
 -- FECTH THE INFO OF THE CUSTOMER WHOSE FIRSTNAME IS "JULIE'
 SELECT * FROM CUSTOMERS
 WHERE CONTACTFIRSTNAME = 'JULIE';
 
  -- FECTH THE INFO OF THE CUSTOMER WHOSE FIRSTNAME IS "JULIE' AND LASTNAME IS KING
SELECT * FROM CUSTOMERS
WHERE CONTACTFIRSTNAME = 'JULIE' AND CONTACTLASTNAME = 'KING';
 
 -- CLASSWORK 
 -- One of our customers, Baane Mini Imports, need to know who their contact person is. 
 -- Use your SQL skills to get the this person and their  city

-- PRIYANKA 
SELECT * FROM CUSTOMERS
WHERE CUSTOMERNAME = 'Baane Mini Imports';

-- DEE DEE
SELECT * FROM CUSTOMERS
WHERE CUSTOMERNAME = 'Baane Mini Imports';

-- 
SELECT CUSTOMERNAME, CONTACTLASTNAME, CONTACTFIRSTNAME, CITY FROM CUSTOMERS
WHERE CUSTOMERNAME = 'Baane Mini Imports';

 -- PREDICATES 
 -- ARE KNOWN AS ADVANCED FILTERS
 -- BETWEEN: USED FILTER BETWEEN RANGE OF VALUES 
 
-- Get the customernumber and checknumber for payments that are between 8000 and 9000 USD
 SELECT CUSTOMERNUMBER, CHECKNUMBER, AMOUNT FROM PAYMENTS
 WHERE AMOUNT BETWEEN 8000 AND 9000;
 
-- IN : USED TO FILTER MULTIPLE ROWS IN A SINGLE COLUMN

-- Suppose I want to know find the offices located in the USA and France
SELECT * FROM OFFICES
WHERE COUNTRY IN ('USA', 'FRANCE');

-- LIKE: USED FOR PATTERN FILTERING 
-- % ===> FETCH AS MANY CHARACTER AS POSSIBLE
-- _ ==> FETCH ONE CHARACTER AT A TIME 

-- CUSTOMERS WTH FIRST NAME STARTING WITH 'Je'
SELECT * FROM CUSTOMERS 
WHERE contactFIRSTNAME LIKE 'JE%';

-- CUSTOMERS WTH lastname  ending WITH 'on'
SELECT * FROM CUSTOMERS 
WHERE contactlastNAME LIKE '%on';

-- -----------------
-- DAY 03 

-- AGGREGATES: USED TO PERFORM SIMPLE STAT OPERATION 

-- SUM: RETURNS THE SUM TOTAL OF VALUES IN A COLUMN 
-- AVG: RETURNS THE AVERAGE MEAN OF VAUES IN A COLUMN 
-- COUNT: USED TO COUNT THE NO OF VALUES  IN A COLUMN 
-- MIN: RETURNS THE MINIMUM VALUE IN A COLUMN
-- MAX: RETURNS THE MAXIMUM VALUE IN A COLUMN 

SELECT * FROM PAYMENTS;

-- FIND THE TOTAL AMOUNT MADE 

SELECT SUM(AMOUNT) FROM PAYMENTS;

-- THE NO OF TRANSCATION MADE 
SELECT COUNT(*) FROM PAYMENTS;

-- 
SELECT COUNT(AMOUNT), SUM(AMOUNT), MIN(AMOUNT) FROM PAYMENTS;

-- ALIASES
-- USED TO RENAME COLUMNS 
-- AS ==> USED TO ALIAS COLUMNS 

SELECT COUNT(AMOUNT) AS NO_OF_TRANS, SUM(AMOUNT) AS TOTAL_TRANS, MIN(AMOUNT) AS MIN_AMOUNT FROM PAYMENTS;


-- GROUPING RECORDS 
-- GROUP BY ==> USED TO GROUP RECORDS 
-- USED TO GROUP ROWS IN A TABLE THAT HAS THE SAME VALUES IN ONE OR MORE COLUMNS 
-- USUALLY USED IN CONJUCTION WITH THE AGGREGATE STATEMENTS
SELECT CUSTOMERNUMBER, SUM(AMOUNT) AS TOTAL_AMOUNT FROM PAYMENTS
GROUP BY CUSTOMERNUMBER;

-- HOW MANY TIMES EACH OF OUR CUSTOMERS PATRONISED US 
SELECT CUSTOMERNUMBER, COUNT(AMOUNT) AS NO_OF_TRANS FROM PAYMENTS
GROUP BY CUSTOMERNUMBER;


-- WHO IS THE MOST VALUABLE CUSTOMER?

-- PRIYANKA 
SELECT CUSTOMERNUMBER, SUM(AMOUNT) AS MVP FROM PAYMENTS
GROUP BY CUSTOMERNUMBER
ORDER BY MVP DESC;

-- DEE DEE
SELECT CUSTOMERNUMBER, COUNT(AMOUNT) AS TOTAL_TRANS FROM PAYMENTS
GROUP BY CUSTOMERNUMBER
ORDER BY COUNT(AMOUNT);

SELECT CUSTOMERNUMBER, SUM(AMOUNT) AS TOTAL_TRANS FROM PAYMENTS
GROUP BY CUSTOMERNUMBER
ORDER BY COUNT(AMOUNT);

-- JAPHETH 
SELECT CUSTOMEMRNUMBER, MAX(AMOUNT) AS TOTAL_AMT FROM PAYMENTS
GROUP BY CUSTOMERNUMBER
ORDER BY MAX(AMOUNT) DESC;

-- EMMANUEL;
SELECT CUSTOMERNUMBER, SUM(AMOUNT) AS TOTAL_TRANS FROM PAYMENTS
GROUP BY CUSTOMERNUMBER
ORDER BY COUNT(AMOUNT) DESC
LIMIT 5;


-- FILTERING GROUPED RECORDS 
-- HAVING ==> USED TO FILTER GROUPED RECORDS 
-- IT WORKS JUST LIKE WHERE 
-- WORKS WITH OPERATORS(>,<,AND, OR ETC) AND PREDICATES (IN, LIKE, BETWEEN)
-- HAVING IS AFTER THE GROUP BY 


-- How much has the customers who spent above $100000 spent  exactly?
SELECT CUSTOMERNUMBER, SUM(AMOUNT) AS TOTAL_AMOUNT FROM PAYMENTS
GROUP BY CUSTOMERNUMBER
HAVING SUM(AMOUNT) > 100000;


-- JOINS 
-- USED TO MERGE TWO OR MORE TABLES TOGETHER 

-- TYPES OF JOINS 
-- INNER: RETURNS ONLY ROWS WITH MATCHING VALEUS IN BOTH TABLES
-- LEFT: RETURNS ALL ROWS FROM THE TABLE ON THE LEFT SIDE AND ONLY MATCHING ROWS FROM THE RIGHT TABLE 
-- RIGHT: RETURNS ALL ROWS FROM THE TABLE ON THE RIGHT SIDE AND ONLY MATCHING ROWS FROM THE LEFT TABLE 
--

-- lets get the names of customers that patronizes the company
select * from customers;
-- customernumber, customername

select * from payments;
-- customernumber, amount

-- relationship: customernumber

select customers.customernumber, customername,payments.customernumber, amount 
from customers 
inner join payments
on customers.customernumber = payments.customernumber;

-- left join
-- fetch all customers with thier orders, whether they have take an order or not 
select * from customers;
-- customernumber, customername

select * from orders;
-- ordernumber, orderdate, customernumber 
-- relatioship: customernumber 

select customers.customernumber, customername, ordernumber, orderdate, orders.customernumber 
from customers
left join orders
on customers.customernumber = orders.customernumber;


-- UNION
-- DDL -- table creations, delete, etc 

-- miscellaneous
-- practice as much as possible 
-- learn more from Youtube, w3schools

-- connect with on linkedin

-- ABDULLAH BANKOLE, MCDAA
-- LINKEDIN = www.linkedin.com/in/abdullahbankole/
